<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.syscomz</groupId>
        <artifactId>syscomzservices</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>notification</artifactId>
    <packaging>jar</packaging> <!-- will use maven-compiler-plugin from the parent POM.xml, but we need to specify packaging file -->

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Setup database connection -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Eureka Client Dependency -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <!-- Import my own clients module into Notification -->
        <dependency>
            <groupId>com.syscomz</groupId>
            <artifactId>clients</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Spring Cloud Sleuth provides Spring Boot auto-configuration for distributed tracing. -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>

        <!-- Add Zipkin dependency -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>

        <!-- RabbitMQ AMQP Advanced Message Queue Protocol -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <!-- Add my custom module AMQP -->
        <dependency>
            <groupId>com.syscomz</groupId>
            <artifactId>amqp</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <!-- Uses the build configuraiton from the parent module -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <!-- To run this profile from the terminal write: mvn clean package -P build-docker-image -->
    <profiles>
        <profile>
            <id>build-docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <!-- If I want to centralize this <execution> I can move this code into main pom.xml below the <configuration> tag -->
                        <!-- <executions> -->
                        <!-- <execution> -->
                        <!-- After the package I want to run the goal below the <phase> -->
                        <!--  <phase>package</phase> -->
                        <!-- <goals> -->
                        <!-- This will build our image and push it to our Docker Registry -->
                        <!-- <goal>build</goal> -->
                        <!-- This will build tart file -->
                        <!-- <goal>buildTar</goal>-->
                        <!-- This will build local Docker Image -->
                        <!-- <goal>dockerBuild</goal>-->
                        <!-- </goals> -->
                        <!--  </execution> -->
                        <!-- </executions> -->
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>